#!/usr/bin/env python3

""" Analyze lightsheet 3D aggregate distributions

Analyze a directory of lightsheet coordinates in separate green/red channels:

.. code-block:: bash

    $ ./analyze_3d_aggregate_mixing.py \\
        --group-type split_label \\
        ../data/empirical_pos

Analyze the theoretical particles generated by ``simulate_3d_aggregate_mixing.py``

Those theoretical particle positions are simulated as green vs all:

.. code-block:: bash

    $ ./analyze_3d_aggregate_mixing.py \\
        --group-type double_green \\
        ../data/sim_uniform_pos

To regenerate the plots for the paper:

.. code-block:: bash

    $ ./analyze_3d_aggregate_mixing.py \\
        --group-type double_green \\
        --plot-point-cloud \\
        ../data/sim_uniform_pos
    $ ./analyze_3d_aggregate_mixing.py \\
        --plot-point-cloud \\
        --group-type split_label \\
        ../data/empirical_pos

Then run the code in ``stats_3d_aggregate_mixing.py``.

"""

# Standard lib
import sys
import argparse
import pathlib

# Allow the scripts directory to be used in-place
THISDIR = pathlib.Path(__file__).resolve().parent
BASEDIR = THISDIR.parent
if THISDIR.name == 'scripts' and (BASEDIR / 'cm_microtissue_struct').is_dir():
    sys.path.insert(0, str(BASEDIR))

# Our own imports
from cm_microtissue_struct.aggregate import group_directories
from cm_microtissue_struct.plotting import plot_3d_sphere_cloud

# Main function


def analyze_aggregate_mixing(rootdir: pathlib.Path,
                             plot_point_cloud: bool = False,
                             **kwargs):
    """ Analyze the aggregate mixing data

    :param Path rootdir:
        The directory with data for each aggregate
    :param bool plot_point_cloud:
        If True, make the 3D point cloud plots
    """
    conditions = group_directories(rootdir, **kwargs)
    for condition in conditions:
        print(condition)
        condition.load_points('gfp')
        condition.load_points('mkate')
        condition.group_points()

        condition.make_outdir()
        condition.calc_volume_stats()
        condition.calc_point_stats()

        if plot_point_cloud:
            plot_3d_sphere_cloud(
                centers=[condition.green_points, condition.red_points],
                colors=['g', 'r'],
                radii=condition.same_cell_radius,
                title=condition.prefix,
                outfile=(condition.outdir / 'point_cloud.png'))

            plot_3d_sphere_cloud(
                centers=[condition.red_points],
                cvalues=[condition.num_red_to_red],
                radii=condition.same_cell_radius,
                title=condition.prefix,
                cmap='inferno',
                vmin=0,
                vmax=15,
                outfile=(condition.outdir / 'point_cloud_num_red_to_red.png'),
                add_colorbar=True)

            plot_3d_sphere_cloud(
                centers=[condition.red_points],
                cvalues=[condition.num_red_to_green],
                radii=condition.same_cell_radius,
                title=condition.prefix,
                cmap='inferno',
                vmin=0,
                vmax=15,
                outfile=(condition.outdir / 'point_cloud_num_red_to_green.png'),
                add_colorbar=True)


# Command line interface


def parse_args(args=None):
    parser = argparse.ArgumentParser()
    parser.add_argument('rootdir', type=pathlib.Path)
    parser.add_argument('--group-type', default='split_label',
                        choices=('split_label', 'double_green', 'double_red'),
                        help='How are points grouped together')
    parser.add_argument('--suffix', default='.svg')
    parser.add_argument('--plot-style', default='light')
    parser.add_argument('--plot-point-cloud', action='store_true')
    return parser.parse_args(args=args)


def main(args=None):
    args = parse_args(args=args)
    analyze_aggregate_mixing(**vars(args))


if __name__ == '__main__':
    main()
